{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/modules/calc.js","webpack:///./js/modules/cards.js","webpack:///./js/modules/forms.js","webpack:///./js/modules/modal.js","webpack:///./js/modules/slider.js","webpack:///./js/modules/tabs.js","webpack:///./js/modules/timer.js","webpack:///./js/script.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AAGA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEe,mEAAI,E;;;;;;;;;;;;AC9HnB;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,0CAA0C,SAAS,QAAQ,YAAY;AACvE,+CAA+C,WAAW;AAC1D;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,IAAI,YAAY,WAAW;AACrE;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,iCAAiC;AACzD;AACA,UAAU;AACV,QAAQ;;AAER;AACA;AACA;AACA,8BAA8B,iCAAiC;AAC/D;AACA,WAAW;AACX,SAAS;;AAET;AACA;AACA;;AAEA;AACA,0BAA0B,iCAAiC;AAC3D;AACA;AACA;;AAEA;;AAEA;AACA,+CAA+C,IAAI,QAAQ,OAAO;AAClE,oDAAoD,MAAM;AAC1D;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,qDAAqD,iBAAiB;AACtE;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;;AAEe,oEAAK,E;;;;;;;;;;;;ACnHpB;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,G;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;;AAEA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,yC;AACA,OAAO;AACP,qB;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,8CAA8C;AAC9C,UAAU;AACV,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEe,oEAAK,E;;;;;;;;;;;;ACvJpB;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8D;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;;AAEe,oEAAK,EAAC;;;;;;;;;;;;;ACxDrB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B,cAAc;AAC5C,gCAAgC,aAAa;AAC7C,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,6C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,+CAA+C,OAAO;;AAEtD;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,+CAA+C,OAAO;;AAEtD;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD,OAAO;;AAE1D;;AAEA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,+BAA+B,cAAc;AAC7C,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iCAAiC,aAAa;AAC9C,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,qEAAM,E;;;;;;;;;;;;ACzMrB;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,GAAG;AACH;;AAEA;AACe,mEAAI,EAAC;;;;;;;;;;;;;ACnDpB;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,IAAI;AACvB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEe,oEAAK,E;;;;;;;;;;;;AClEpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACE;AACA;AACA;AACE;AACJ;AACE;;AAEpC;AACA,EAAE,6DAAI;AACN,EAAE,8DAAK;AACP,EAAE,8DAAK;AACP,EAAE,8DAAK;AACP,EAAE,+DAAM;AACR,EAAE,6DAAI;AACN,EAAE,8DAAK;AACP,CAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/script.js\");\n","// Задача сделать КАЛЬКУЛЯТОР калорий на сайте\r\n  // алгоритм: собираем данные и подставляем в формулы.\r\n\r\nfunction calc() {\r\n\r\n  const result = document.querySelector('.calculating__result span');\r\n\r\n  let sex, height, weight, age, ratio;\r\n\r\n  // Условия, если уже до этого  выбирали пол и активность \r\n   if (localStorage.getItem('sex')) {\r\n     sex = localStorage.getItem('sex');\r\n   } else {\r\n     sex = 'female';\r\n     localStorage.setItem('sex', 'female');\r\n   }\r\n\r\n   \r\n   if (localStorage.getItem('ratio')) {\r\n    ratio = localStorage.getItem('ratio');\r\n  } else {\r\n    ratio = '1.375';\r\n    localStorage.setItem('ratio', 1.375);\r\n  }\r\n\r\n  // Функция для запоминания выбора с предыдущего входа на страницу\r\n  function initLocalSettings(selector, activeClass) {\r\n    const elements = document.querySelectorAll(selector);\r\n\r\n    elements.forEach(elem => {\r\n      elem.classList.remove(activeClass);\r\n      // Условия для пола в localStorage\r\n      if (elem.getAttribute('id') === localStorage.getItem('sex')) {\r\n        elem.classList.add(activeClass);\r\n      }\r\n      // Условие для активности в localStorage\r\n      if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) {\r\n        elem.classList.add(activeClass);\r\n      }\r\n    })\r\n    \r\n  }\r\n\r\n  // Вызов 2 раза для пола и активности\r\n  // ВАЖНО так как обращаемся к блокам внутри указанного селектора, указываем div после селектора\r\n  initLocalSettings('#gender div', 'calculating__choose-item_active');\r\n  initLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');\r\n  // функция для расчета суточной нормы калорий\r\n  function calcTotal() {\r\n    // Начать с проверки, все ли данные собрали\r\n    if (!sex || !height || !weight || !age || !ratio) {\r\n      result.textContent = '____';\r\n      return;\r\n    }\r\n\r\n    // Теперь условия для формулы для женщин и мужчин\r\n    if (sex === 'female') {\r\n      result.textContent = Math.round(ratio * (447.36 + (9.2 * weight) + (3.1 * height) - (4.3 * age)));\r\n    } else {\r\n      result.textContent = Math.round(ratio * (88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)));\r\n    }\r\n  }\r\n  calcTotal()\r\n  // Функция для приема данных с дивов переключателей, для нее нужен родитель и класс активности\r\n  function getStaticInfo(selector, activeClass) {\r\n    // Сначала получим все дивы в родителе\r\n    const elements = document.querySelectorAll(selector);\r\n\r\n    elements.forEach(elem => {\r\n      elem.addEventListener('click', (e) => {\r\n        if (e.target.getAttribute('data-ratio')) {\r\n          ratio = +e.target.getAttribute('data-ratio');\r\n          localStorage.setItem('ratio', +e.target.getAttribute('data-ratio'));\r\n        } else {\r\n          sex = e.target.getAttribute('id');\r\n          localStorage.setItem('sex', e.target.getAttribute('id'));\r\n        }\r\n  \r\n        // Удаляем у всех элементов класс активности \r\n        elements.forEach(elem => elem.classList.remove(activeClass));\r\n        // Назначаем его элементу, по которому кликнули\r\n        e.target.classList.add(activeClass);\r\n        calcTotal();\r\n      });\r\n      });\r\n    }\r\n\r\n  // Вызываем эту функцию 2 раза для блока с гендерами и активностью\r\n  // ВАЖНО так как обращаемся к блокам внутри указанного селектора, указываем div после селектора\r\n  getStaticInfo('#gender div', 'calculating__choose-item_active');\r\n  getStaticInfo('.calculating__choose_big div', 'calculating__choose-item_active');\r\n\r\n  // Принимаем данные от пользователя - рост, вес и возраст\r\n  function getDynamicInfo(selector) {\r\n    const input = document.querySelector(selector);\r\n\r\n    input.addEventListener('input', () => {\r\n      // условие для ввода не чисел\r\n      if (input.value.match(/\\D/g)) {\r\n        input.style.backgroundColor = 'red';\r\n      } else {\r\n        input.style.backgroundColor = '';\r\n      }\r\n      // удобнее всего проверять данные можно с помощью switch case\r\n      switch(input.getAttribute('id')) {\r\n        case 'height':\r\n          height = +input.value;\r\n          break;\r\n        case 'weight':\r\n          weight = +input.value;\r\n          break;\r\n        case 'age':\r\n          age = +input.value;\r\n          break;\r\n      }\r\n      calcTotal();\r\n    });\r\n  }\r\n\r\n  // Вызвать функцию 3 раза сс разными аргументами\r\n  getDynamicInfo('#height');\r\n  getDynamicInfo('#weight');\r\n  getDynamicInfo('#age');\r\n\r\n}\r\n\r\nexport default calc;","// Задача: шаблонизировать КАРТОЧКИ меню\r\n\r\nfunction cards() {\r\nconst menuCards = document.querySelector('.menu_cards');\r\n\r\n// Создаем класс для карточек\r\n// В будущем мы не знаем сколько классов мы захотим изменить, потому добавляем rest оператор\r\n    class MenuItem {\r\n      constructor(img, altimg, title, descr, price, parentSelector, ...classes) {\r\n        this.img = img;\r\n        this.altimg = altimg;\r\n        this.title = title;\r\n        this.descr = descr;\r\n        this.price = price;\r\n        // classes будут массивом\r\n        this.classes = classes;\r\n        // передадим родителя, куда будем пушить элемент\r\n        this.parent = document.querySelector(parentSelector);\r\n        this.transfer = 27; \r\n        this.changeToUAH();\r\n    }\r\n\r\n  // метод для конвертации из долларов в гривны\r\n    changeToUAH() {\r\n      this.price = this.price * this.transfer;\r\n    }\r\n\r\n      render() {\r\n        const element = document.createElement('div');\r\n        // Rest оператор не поддерживает параметр по умолчанию, потому делаем параметр по умолчанию через логическое выражение\r\n        if(this.classes.length === 0) {\r\n          this.element = 'menu__item';\r\n          element.classList.add(this.element);\r\n        } else {\r\n        // добавляем наш список классов к HTML разметке\r\n        this.classes.forEach(className => element.classList.add(className));\r\n        }\r\n\r\n        element.innerHTML = `\r\n        <img class=\"menu__item_img\" src=${this.img} alt=\"${this.altimg}\" />\r\n        <h3 class=\"menu__item-subtitle\">Меню ${this.title}</h3>\r\n        <div class=\"menu__item-descr\">\r\n        ${this.descr}\r\n        </div>\r\n        <div class=\"menu__item-divider\"></div>\r\n        <div class=\"menu__item-price\">\r\n          <div class=\"menu__item-cost\">Цена:</div>\r\n          <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\r\n        </div>\r\n      `;\r\n      // добавим родителя\r\n      this.parent.append(element);\r\n      // Как я самостоятельно решал, это более гибкий метод!\r\n      // return menuCards.insertAdjacentHTML('afterbegin', card);\r\n      }\r\n  }\r\n\r\n  // Получаем информацию для карточек с сервера с помощью get запроса\r\n  const getResource = async (url) => {\r\n    const res = await fetch(url);\r\n\r\n    // Так как 404 или 500 не повлекут за собо ошибки, этот момент отрабтаем вручную с помощью свойств .ok и status\r\n    if (!res.ok) {\r\n        throw new Error(`Couldn't fetch ${url}, status: ${res.status}`)\r\n    }\r\n    return await res.json();\r\n  };\r\n\r\n  // Способ формирования верстки с помощью класов\r\n  // getResource('http://localhost:3000/menu')\r\n  //   .then(data => {\r\n  //     data.forEach(({img, altimg, title, descr, price}) => {\r\n  //       new MenuItem(img, altimg, title, descr, price, '.menu .container').render();\r\n  //     });\r\n  //   });\r\n\r\n  // Используем библиотеку axios для создания карточек\r\n  axios.get(' http://localhost:3000/menu')\r\n    .then(data => {\r\n          data.data.forEach(({img, altimg, title, descr, price}) => {\r\n            new MenuItem(img, altimg, title, descr, price, '.menu .container').render();\r\n          });\r\n        });\r\n\r\n  // Способ формирования верстки без классов - на лету. Он исполльзуется, когда такую верстку нужно построить только раз и не нужен шаблонизатор.\r\n  // getResource('http://localhost:3000/menu')\r\n  //   .then(data => createCard(data));\r\n\r\n  //     function createCard(data) {\r\n  //       data.forEach(({img, altimg, title, descr, price}) => {\r\n  //         const element = document.createElement('div');\r\n  //         // курс гривны к доллару\r\n  //         const transfer = 27;\r\n\r\n  //         element.classList.add('menu__item');\r\n\r\n  //         element.innerHTML = `\r\n  //         <img class=\"menu__item_img\" src=${img} alt=\"${altimg}\" />\r\n  //         <h3 class=\"menu__item-subtitle\">Меню ${title}</h3>\r\n  //         <div class=\"menu__item-descr\">\r\n  //         ${descr}\r\n  //         </div>\r\n  //         <div class=\"menu__item-divider\"></div>\r\n  //         <div class=\"menu__item-price\">\r\n  //           <div class=\"menu__item-cost\">Цена:</div>\r\n  //           <div class=\"menu__item-total\"><span>${price * transfer}</span> грн/день</div>\r\n  //         </div>\r\n  //         `;\r\n\r\n  //         document.querySelector('.menu .container').append(element);\r\n  //       });\r\n  //     };\r\n\r\n}\r\n\r\nexport default cards;","// Задача: все ФОРМЫ принимают данные и отправляют на сервер\r\n\r\nfunction forms() {\r\n  // выполним сначала с помощью XML \r\n  const forms = document.querySelectorAll('form');\r\n\r\n  // создадим объект, в котором будут тексты сообщений\r\n  const message = {\r\n    loading: 'img/form/spinner.svg',\r\n    success: 'Спасибо! Мы скоро с вами свяжемся',\r\n    failure: 'Что-то пошло не так...' \r\n  } \r\n\r\n  // Повязываем нашу функцию получения данных к формам\r\n  forms.forEach(item => {\r\n    bindPostData(item);\r\n  })\r\n\r\n  // функция для работы с сервером \r\n  // Нужно указать. что это асинхронный код (async), чтобы не было ошибки, так как мы не знаем точное время, когда нам вернуться данные с promise\r\n  const postData = async (url, data) => {\r\n    // ставим await перед теми данными, которых нам нужно дождаться\r\n    const res = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type': 'application/json'\r\n      },\r\n      body: data\r\n    });\r\n  // здесь тоже нужен await, так как тут тоже promise\r\n    return await res.json();\r\n  };\r\n\r\n  // функция получения данных из формы\r\n  function bindPostData(form) {\r\n    form.addEventListener('submit', (e) => {\r\n      // в первую очередь отменим перезагрузку старницы\r\n      e.preventDefault();\r\n\r\n      //  блок с сообщением\r\n      const statusMessage = document.createElement('img');\r\n      statusMessage.src = message.loading;\r\n      statusMessage.style.cssText = `\r\n          display: block;\r\n          margin: 0 auto;\r\n          `;\r\n      // Пока наше сообщение существует только в HTML коде и его нужно добавить на страницу методом append к форме\r\n      // form.append(statusMessage);\r\n\r\n      // Так как формы разные, делаем так, чтобы спиннер одинаково хорошо отображалмся\r\n      form.insertAdjacentElement('afterend', statusMessage);\r\n      \r\n      // const request = new XMLHttpRequest();\r\n      // request.open('POST', 'server.php');\r\n\r\n      // сохраним данные с помощью FormData\r\n      const formData = new FormData(form);\r\n\r\n      // Прием для изменения формата передачи данных из XML в JSON - создаем новый объект и переберем старые данные в него\r\n      // const object = {};\r\n      //   formData.forEach(function(value, key) {\r\n      //     object[key] = value;\r\n      //   });\r\n\r\n      // Изменим код выше с помощью новых методов\r\n      const json = JSON.stringify(Object.fromEntries(formData.entries()));\r\n\r\n      // Пример метода entries, превращая объект в массив массивов - матрицу\r\n      // const obj = {a: 23, b: 50};\r\n      // console.log(Object.entries(obj));\r\n\r\n      // Тогда сюда вместо formData помещаем object\r\n      // request.send(formData);\r\n      // request.send(json);\r\n\r\n      // Функция работы с сервером\r\n      postData('http://localhost:3000/requests', json)\r\n      // Обрабатываем результат запроса с помощью then\r\n      .then(data => {\r\n        // заменили request.remove на data - это те данные, которые нам вернул сервер\r\n        console.log(data);\r\n        showThanksModal(message.success);\r\n        statusMessage.remove();\r\n      }).catch(() => {\r\n        showThanksModal(message.failure);  \r\n      }).finally(() => {\r\n        form.reset(); \r\n      });\r\n\r\n      // request.addEventListener('load', () => {\r\n      //   if(request.status === 200) {\r\n      //     console.log(request.response);\r\n      //     showThanksModal(message.success);\r\n      //     // очищаем форму после отправки\r\n      //       form.reset();\r\n      //       statusMessage.remove();\r\n      //   } else {\r\n      //     showThanksModal(message.failure);    }\r\n      // });\r\n    });\r\n  }\r\n\r\n    //  Делаем окно с красивым оповещением пользователя с помощью старого модального окна\r\n    function showThanksModal(message) {\r\n      const prevModalDialog = document.querySelector('.modal__dialog');\r\n      // Сперва спрячем это окно\r\n      prevModalDialog.classList.add('hide');\r\n      openModal();\r\n\r\n      // Создадим новое окно с помощью js\r\n      const thanksModal = document.createElement('div');\r\n      thanksModal.classList.add('modal__dialog');\r\n      thanksModal.innerHTML = `\r\n      <div class='modal__content'>\r\n        <div class='modal__close' data-close>×</div>\r\n        <div class='modal__title'>${message}</div>\r\n      </div>\r\n      `;\r\n\r\n      document.querySelector('.modal').append(thanksModal);\r\n    \r\n      // Сделаем временной интервал на показ окна\r\n      setTimeout(() => {\r\n          thanksModal.remove();\r\n          prevModalDialog.classList.add('show');\r\n          prevModalDialog.classList.remove('hide');\r\n          closeModal();\r\n          }, 4000);\r\n    }\r\n\r\n    // разбираем fetch API\r\n    // скопировано с jsonplaceholder.com - обращаемся к первой тудушке\r\n    // fetch('https://jsonplaceholder.typicode.com/posts', {\r\n    //   method: 'POST',\r\n    //   body: JSON.stringify({name: 'Alex'}),\r\n    // всегда желательно указывать заголовки, чтобы понимать какой тип данных мы отправляем\r\n    //   headers: {\r\n    //     'Content-type': 'application/json'\r\n    //   }\r\n    // })\r\n    //   .then(response => response.json())\r\n    //   .then(json => console.log(json));\r\n  \r\n\r\n  // получим доступ к базе данных db.json\r\n  // fetch('http://localhost:3000/menu')\r\n  //   .then(data => data.json())\r\n  //   .then(res => console.log(res));\r\n\r\n}\r\n\r\nexport default forms;","// Задача, сделать МОДАЛЬНОЕ ОКНО\r\n\r\nfunction modal() {\r\n  // Делаем через дата атрибуты\r\n  const modal = document.querySelector('.modal'),\r\n        modalOpenBtn = document.querySelectorAll('[data-modal]');\r\n\r\n  // функция для закрытия окна, так как она повторяется, а нужно следовать DRY = dont repeat yorself\r\n  function closeModal() {\r\n    modal.classList.add('hide');\r\n    modal.classList.remove('show');\r\n    document.body.style.overflow = ''\r\n  }\r\n\r\n  const openModal = () => {\r\n    modal.classList.remove('hide');\r\n    modal.classList.add('show');\r\n    document.body.style.overflow = 'hidden';\r\n    // Если пользователь уже открыл окно, оно не будет открываться снова через указанное время\r\n    clearInterval(modalTimerId);\r\n  }\r\n\r\n  // остановим показ модального окна после первой прокрутки\r\n  const showModalByScroll = () => {\r\n    if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {\r\n      openModal();\r\n      window.removeEventListener('scroll', showModalByScroll);  \r\n    }\r\n  }\r\n\r\n  modalOpenBtn.forEach(item => {\r\n    item.addEventListener('click', openModal);\r\n  });\r\n\r\n  // Если кликаем вне окна - оно закрывается\r\n  modal.addEventListener('click', (e) => {\r\n    if (e.target === modal || e.target.getAttribute('data-close') == '') {\r\n      closeModal();\r\n    }\r\n  });\r\n\r\n  // Закрываем окно на клавишу esc\r\n  document.addEventListener('keydown', (e) => {\r\n    if (e.code === 'Escape' && modal.classList.contains('show')) {\r\n      closeModal();\r\n    }\r\n  });\r\n\r\n  // Вызываем модальное окно через некоторое время\r\n  const modalTimerId = setTimeout(openModal, 50000);\r\n\r\n  // Вызываем модальное окно если пользователь проскролил страницу до конца\r\n  window.addEventListener('scroll', showModalByScroll);\r\n\r\n}\r\n\r\nexport default modal;\r\n","  // Задача: реализовать СЛАЙДЕР, алгоритм в комментариях к коду\r\n    // После здесь же делаем слайдер карусель\r\n      // Затем делаем навигацию по слайдам в виде точек. Алгоритм \r\n      // 1. получаем весь слайдер со страницы и установить ему position relative, так как точки спозиционированы внизу слайдера абсолютно\r\n      // 2. создать обертку для точек\r\n      // 3. создать количество точек равное количеству слайдов (метод перебора или цикл). для каждой точки атрибут соответствия слайду и класс активности - какой слайд сейчас активен\r\n      // 4. когда кликаем на точку - перемещаемся на соответствующий слайд\r\n\r\n\r\nfunction slider() {\r\n  // получить элементы со страницы\r\n  const slides = document.querySelectorAll('.offer__slide'),\r\n        prev = document.querySelector('.offer__slider-prev'),\r\n        next = document.querySelector('.offer__slider-next'),\r\n        current = document.querySelector('#current'),\r\n        total = document.querySelector('#total'),\r\n        // Тут элементы для карусели\r\n        slidesWrapper = document.querySelector('.offer__slider-wrapper'),\r\n        slidesField = document.querySelector('.offer__slider-inner'), \r\n        width = window.getComputedStyle(slidesWrapper).width,\r\n        // Получим весь слайдер для навигации\r\n        slider = document.querySelector('.offer__slider');\r\n\r\n// сделать индекс текущего слайда и получить общее количество слайдов\r\n// оставляем его для счетчика слайдов на странице\r\n  let currentSlide = 1;\r\n\r\n// Для счетчика возьмем функционал из предыдущего слайдера, но дополним, так как функции showSlides нет\r\n  const addZeroToCountNumber = () => {\r\n    if (slides.length < 10) {\r\n      total.textContent = `0${slides.length}`;\r\n      current.textContent = `0${currentSlide}`\r\n    } else {\r\n      total.textContent = slides.length;\r\n      current.textContent = currentSlide;\r\n    }\r\n  };\r\n  addZeroToCountNumber();\r\n\r\n  // Перерменная-ориентрир, чтобы знать насколько мы отступили вправо или влево\r\n  let offset = 0;\r\n\r\n  // Назначаем ширину поля для слайдера карусели в css\r\n  slidesField.style.width = 100 * slides.length +'%';\r\n\r\n  // Следующий кусоклучше указать в css файле или короче будет с помощью свойства css текст\r\n  // Выстроим слайды в полоску с помощью flex\r\n  slidesField.style.display = 'flex';\r\n  // Плавное передвижение достигается с помощью transition\r\n  slidesField.style.transition = '0.5s all';\r\n  // скрываем слайды не в области видимости\r\n  slidesWrapper.style.overflow = 'hidden';\r\n\r\n  // Убедимся, что все слайды равны по ширине\r\n  slides.forEach(slide => {\r\n  slide.style.width = width;\r\n  });\r\n\r\n  // Установить слайдеру относитильное позиционирование для правильного отображения навигации\r\n  slider.style.position = 'relative';\r\n\r\n  // Создаем контейнер для точек\r\n  const sliderIndicators = document.createElement('ol'),\r\n        // создадим пустой массив для внутренних точек\r\n        dots = [];\r\n  sliderIndicators.classList.add('slider-indicators');\r\n  slider.append(sliderIndicators);\r\n\r\n// создаем внутри точки по количеству слайдов\r\n  slides.forEach((slide, index) => {\r\n    const dot = document.createElement('li');\r\n    dot.classList.add('dot');\r\n\r\n      // Устанавливаем связь со слайдами: получается, что индекс = номеру слайда\r\n      dot.setAttribute('data-slide-to', index + 1);\r\n\r\n      // Проверка на активный слайд\r\n    if (index == 0) {\r\n      dot.style.opacity = 1;\r\n    }\r\n\r\n    sliderIndicators.append(dot);\r\n    // Запушим точку в наш массив\r\n    dots.push(dot);\r\n  });\r\n\r\n  // Функция установки размытия навигации на текущий слайд\r\n  const changeNavigationOpacity = () => {\r\n    dots.forEach(dot => dot.style.opacity = '.5');\r\n    dots[currentSlide - 1].style.opacity = 1;  \r\n  }\r\n\r\n  // Функция для перевода в число и удаления всех не цифр со строки\r\n  const deleteNotDigits = (str) =>  +str.replace(/\\D/g, '');\r\n\r\n  // Обработчики событий\r\n  next.addEventListener('click', () => {\r\n  // Условие для возвращения слайдера в начальную позицию? когда промотали все слайды и значение офсета = ширина одного слайда умножить на количество слайдов\r\n  if (offset == deleteNotDigits(width) * (slides.length - 1)){\r\n      offset = 0;\r\n  } else {\r\n      offset += deleteNotDigits(width);\r\n    }\r\n// Двигаем слайдер\r\n  slidesField.style.transform = `translateX(-${offset}px)`;\r\n\r\n  // Условие переключения счетчика при переключении слайдов\r\n  if (currentSlide == slides.length) {\r\n    currentSlide = 1\r\n  } else {\r\n    currentSlide++;\r\n}\r\n\r\n  // Условие для 0 перед счетчиком меньше 10\r\n  addZeroToCountNumber();\r\n\r\n  // Для отображения навигации\r\n  changeNavigationOpacity();\r\n  });\r\n\r\n  prev.addEventListener('click', () => {\r\n  // Условие для возвращения слайдера в начальную позицию\r\n  if (offset == 0){\r\n    offset = deleteNotDigits(width) * (slides.length - 1);\r\n  } else {\r\n    offset -= deleteNotDigits(width);\r\n  }\r\n  // Двигаем слайдер\r\n  slidesField.style.transform = `translateX(-${offset}px)`\r\n\r\n  // Условие переключения счетчика при переключении слайдов\r\n  if (currentSlide == 1) {\r\n    currentSlide = slides.length;\r\n  } else {\r\n    currentSlide--;\r\n  }\r\n\r\n  // Условие для 0 перед счетчиком меньше 10\r\n  addZeroToCountNumber();\r\n\r\n  changeNavigationOpacity();\r\n  });\r\n\r\n  // Функционал: нажал на навигацию - переключился на соответствующий слайд\r\n  // алгоритм: меняется offset, двигается слайд. меняется opacity, меняется счетчик\r\n  dots.forEach(dot => {\r\n    dot.addEventListener('click', (e) => {\r\n      const slideTo = e.target.getAttribute('data-slide-to');\r\n      currentSlide = slideTo\r\n\r\n      offset = deleteNotDigits(width) * (slideTo - 1);\r\n      slidesField.style.transform = `translateX(-${offset}px)`;\r\n\r\n      addZeroToCountNumber();\r\n\r\n      changeNavigationOpacity();\r\n    });\r\n  });\r\n\r\n  // // Вызов функции показа слайдов перед ее объеявлением\r\n  // showSlides(currentSlide);\r\n\r\n  // //  Отдельно вынесено получение общего количества слайдов в документе. чтобы сделать это один раз, а не каждый раз, когда вызываем функцию\r\n  // if (slides.length < 10) {\r\n  //   total.textContent = `0${slides.length}`;\r\n  // } else {\r\n  //   total.textContent = slides.length;\r\n  // }\r\n\r\n  // // 3. Функции показа слайда и сокрытия остальных, и проверять условие перехода с первого на последний и наоборот\r\n  // function showSlides(item) {\r\n\r\n  // // проверка переключения с первого на последний и наоборот\r\n  // if (item > slides.length) {\r\n  //   currentSlide = 1;\r\n  // }\r\n  // if(item < 1) {\r\n  //   currentSlide = slides.length\r\n  // }\r\n\r\n  // slides.forEach(item => item.classList.add('hide'));\r\n  // slides[currentSlide - 1].classList.remove('hide');\r\n\r\n  // // Текст в переключателе слайда \r\n  // if (currentSlide < 10) {\r\n  //   current.textContent = `0${currentSlide}`;\r\n  // } else {\r\n  //   current.textContent = currentSlide;\r\n  // }\r\n  // }\r\n\r\n  // // Функция для стрелок\r\n  // function plusSlides(n) {\r\n  //   showSlides(currentSlide += n);\r\n  // }\r\n  // // Навешиваем обработчик события клика на каждую стрелку, работает только с колбэк функцией (ошибся сначала)\r\n  // next.addEventListener('click', () => plusSlides(1));\r\n  // prev.addEventListener('click', () => plusSlides(-1));\r\n\r\n}\r\n\r\nexport default slider;","// Задача, сделать переключатель ТАБОВ\r\n\r\nfunction tabs() {\r\n  const tabs = document.querySelectorAll('.tabheader__item'),\r\n  tabsContent = document.querySelectorAll('.tabcontent'),\r\n  tabsParent = document.querySelector('.tabheader__items');\r\n\r\n  // Функция скрывает табы и удаляет класс активности с заголовков\r\n  const hideTabContent = () => {\r\n    tabsContent.forEach(item => {\r\n      item.classList.add('hide');\r\n      item.classList.remove('show', 'fade')\r\n    });\r\n\r\n    tabs.forEach(item => {\r\n      item.classList.remove('tabheader__item_active');\r\n    });\r\n  }\r\n\r\n  // Функция раскрывает нужный таб\r\n  // В эту функция сразу передадим параметр по умолчанию, возможно начиная с ES6\r\n  const showTabContent = (i = 0) => {\r\n    tabsContent[i].classList.add('show', 'fade');\r\n    tabsContent[i].classList.remove('hide');\r\n\r\n    tabs[i].classList.add('tabheader__item_active');\r\n  }\r\n\r\n  hideTabContent();\r\n\r\n  // В этой функции при первом вызове показываем первый слайд, потому в аргументах стоит первый элемент\r\n  showTabContent();\r\n\r\n  // Назначить событие кликом\r\n  tabsParent.addEventListener('click', (event) => {\r\n    // Объявим event.target в переменную, чтобы постоянно ее не писать\r\n    const target = event.target;\r\n\r\n    if (target && target.classList.contains('tabheader__item')) {\r\n      tabs.forEach((item, i) => {\r\n        if (target == item) {\r\n          hideTabContent();\r\n          showTabContent(i);\r\n        }\r\n      });\r\n    }\r\n\r\n  });\r\n}\r\n\r\n// Используем синтаксис commonjs\r\nexport default tabs;\r\n","    // Задача, сделать ТАЙМЕР\r\n\r\nfunction timer() {\r\n    const deadline = '2020-09-17';\r\n\r\n    const getTimeRemaining = (endtime) => {\r\n      // делаем тех переменную, в которой будет количество оставшихся миллисекунд\r\n      const t = Date.parse(endtime) - Date.parse(new Date()),\r\n        // Переменные в которые помещаем остаток времени\r\n        days = Math.floor(t / (1000 * 60 * 60 * 24)),\r\n        hours = Math.floor((t / (1000 * 60 * 60) % 24)),\r\n        minutes = Math.floor((t / 1000 / 60) % 60),\r\n        seconds = Math.floor((t / 1000) % 60);\r\n  \r\n      // Но возвращаем мы объект с данными\r\n      return {\r\n        'total': t,\r\n        days,\r\n        hours,\r\n        minutes,\r\n        seconds\r\n      }\r\n    }\r\n    // Функция добавления нуля\r\n    function getZero(num) {\r\n      if (num >= 0 && num < 10) {\r\n        return `0${num}`\r\n      } else {\r\n        return num\r\n      }\r\n    }\r\n    // Функция устанавливает таймер на страницу\r\n    const setClock = (selector, endtime) => {\r\n      // берем первый таймер на странице\r\n      const timer = document.querySelector(selector),\r\n        days = timer.querySelector('#days'),\r\n        hours = timer.querySelector('#hours'),\r\n        minutes = timer.querySelector('#minutes'),\r\n        seconds = timer.querySelector('#seconds');\r\n  \r\n      // внутри функция обновляет часы\r\n      const updateClock = () => {\r\n        // Сколько осталось времени до дедлайна\r\n        const t = getTimeRemaining(endtime);\r\n  \r\n        // Выводим полученные значения на страницу\r\n        days.innerHTML = getZero(t.days);\r\n        hours.innerHTML = getZero(t.hours);\r\n        minutes.innerHTML = getZero(t.minutes);\r\n        seconds.innerHTML = getZero(t.seconds);\r\n  \r\n        // Останавливаем таймер\r\n        if (t.total <= 0) {\r\n          clearInterval(timeInterval)\r\n        }\r\n      }\r\n      // Запускаем обновление времени каждую секунду\r\n      const timeInterval = setInterval(updateClock, 1000);\r\n      // Вызов функции, чтобы не было моргания верстки через 1 секунду\r\n      updateClock();\r\n    }\r\n  \r\n    setClock('.timer', deadline);\r\n  \r\n}\r\n\r\nexport default timer;","import calc from './modules/calc';\r\nimport cards from './modules/cards';\r\nimport forms from './modules/forms';\r\nimport modal from './modules/modal';\r\nimport slider from './modules/slider';\r\nimport tabs from './modules/tabs';\r\nimport timer from './modules/timer';\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n  calc();\r\n  cards();\r\n  forms();\r\n  modal();\r\n  slider();\r\n  tabs();\r\n  timer();\r\n});\r\n"],"sourceRoot":""}